üß† Problem: Polymorphic Academic Grading System Using Inheritance and Abstraction
Problem Context

A university evaluates students differently depending on their program type. You are required to design a system that can compute final grades polymorphically, using an abstract superclass Student and its specialized subclasses.
In addition to computing grades, the system should determine pass/fail status, apply bonus marks based on academic level, and print formatted grade reports.

Program Requirements
1. Abstract Base Class: Student

Define an abstract class Student that includes:

Instance variables: String name, String studentId, String department

Abstract methods:
double calculateFinalGrade()
String getGradeLetter()

Concrete methods:
boolean isPassed()
String toString()

The isPassed() method returns true if the final grade is ‚â• 60.

2. Subclasses of Student

Each subclass must override the abstract methods according to its own grading scheme.

a) UndergraduateStudent

Attributes: assignmentScore, midtermScore, finalExamScore

Formula:
finalGrade = assignmentScore * 0.3 + midtermScore * 0.3 + finalExamScore * 0.4

Bonus: If the department is ‚ÄúCSE‚Äù, add a 2% departmental merit bonus

b) GraduateStudent

Attributes: projectScore, examScore, participationScore

Formula:
finalGrade = projectScore * 0.5 + examScore * 0.4 + participationScore * 0.1

Bonus: Add 5% extra if projectScore ‚â• 90

c) PhDStudent

Attributes: publicationScore, defenseScore

Formula:
finalGrade = publicationScore * 0.7 + defenseScore * 0.3

Bonus: If publicationScore ‚â• 95, add 5 bonus marks (not percent)

3. Supporting Class: Course

Define a Course class with attributes:
courseCode, title, and Student[] enrolledStudents.

The class should include a method printGradeReport() that calls each student‚Äôs:

calculateFinalGrade()

getGradeLetter()

isPassed()

All calls must be polymorphic, printing results in a tabular format.

4. Main Program

In the main() method:

Create sample objects of UndergraduateStudent, GraduateStudent, and PhDStudent

Store them in a Student[] array or an ArrayList<Student>

Create a Course object and pass the array

Call course.printGradeReport() to generate the report
Course: CSE 505 - Advanced Programming Paradigms
------------------------------------------------------------
ID      Name             Type             Final Grade  Grade  Status
------------------------------------------------------------
U101    Alice Rahman     Undergraduate    78.2         B      Pass
G302    Rahim Karim      Graduate         88.5         A      Pass
P501    Dr. Nabila Amin  PhD              92.0         A+     Pass
------------------------------------------------------------
